/*
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2007-2012 Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */
package org.sonatype.nexus.proxy.maven.wl.internal;

import static com.google.common.base.Preconditions.checkArgument;
import static org.sonatype.nexus.util.PathUtils.elementsOf;
import static org.sonatype.nexus.util.PathUtils.pathFrom;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import org.sonatype.nexus.proxy.maven.wl.PrefixSource;

import com.google.common.io.Closeables;

/**
 * Marshals entries into raw streams and other way around. This is a simple text based file with prefixes with dead
 * simple syntax: Lines starting with '#' are comments, and any other non empty line is actually a prefix.
 * 
 * @author cstamas
 * @since 2.4
 */
public class TextFilePrefixSourceMarshaller
{
    protected static final String[] HEADERS = { "# Prefix file generated by Sonatype Nexus",
        "# Do not edit, changes will be overwritten!" };

    protected static final Charset CHARSET = Charset.forName( "UTF-8" );

    private final int prefixFileMaxEntryCount;

    /**
     * Constructor.
     * 
     * @param prefixFileMaxEntryCount the upper limit of entry count to load.
     */
    public TextFilePrefixSourceMarshaller( final int prefixFileMaxEntryCount )
    {
        checkArgument( prefixFileMaxEntryCount > 0 );
        this.prefixFileMaxEntryCount = prefixFileMaxEntryCount;
    }

    /**
     * Marshalls the prefix source into the output stream.
     * 
     * @param prefixSource
     * @param outputStream
     * @throws IOException
     */
    public void write( final PrefixSource prefixSource, final OutputStream outputStream )
        throws IOException
    {
        final List<String> entries = prefixSource.readEntries();
        final PrintWriter printWriter = new PrintWriter( new OutputStreamWriter( outputStream, CHARSET ) );
        for ( String header : HEADERS )
        {
            printWriter.println( header );
        }
        for ( String entry : entries )
        {
            printWriter.println( entry );
        }
        printWriter.flush();
    }

    /**
     * Unmarshalls the prefix source from input stream.
     * 
     * @param inputStream
     * @return prefix source
     * @throws IOException
     */
    public PrefixSource read( final InputStream inputStream )
        throws IOException
    {
        BufferedReader reader = null;
        try
        {
            final ArrayList<String> entries = new ArrayList<String>();
            reader = new BufferedReader( new InputStreamReader( inputStream, CHARSET ) );
            String line = reader.readLine();
            while ( line != null )
            {
                // trim
                line = line.trim();
                if ( !line.startsWith( "#" ) && line.length() > 0 )
                {
                    // Igor's find command makes path like "./org/apache/"
                    while ( line.startsWith( "." ) )
                    {
                        line = line.substring( 1 );
                    }
                    // win file separators? Highly unlikely but still...
                    line = line.replace( '\\', '/' );
                    // normalization
                    entries.add( pathFrom( elementsOf( line ) ) );
                }
                line = reader.readLine();

                // dump big files
                if ( entries.size() > prefixFileMaxEntryCount )
                {
                    throw new IOException( "Prefix file entry count exceeds maximum allowed count ("
                        + prefixFileMaxEntryCount + "), refusing to load it." );
                }
            }
            return new ArrayListPrefixSource( entries );
        }
        finally
        {
            Closeables.closeQuietly( reader );
        }
    }
}
